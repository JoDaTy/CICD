services:
  sidekick_service:
    # Configuration for the sidekick service
    # image: ${IMAGE_PREFIX}/${GHCR_USERNAME}/quickstart-tutorials/jenkinsci-tutorials:sidekick_${BRANCH_SUFFIX}
    build:
        context: ./dockerfiles/sidekick
    stdin_open: true
    tty: true
    entrypoint: sh -c "/usr/local/bin/keygen.sh /ssh-dir" # Runs the keygen.sh script and specifies the output directory
    volumes:
      - agent-ssh-dir:/ssh-dir # Mounts the agent-ssh-dir volume to the /ssh-dir path inside the container
    healthcheck:
      test: ["CMD-SHELL", "[ -f /ssh-dir/conductor_ok ] || exit 1"]
      # Checks if the conductor_ok file exists in the /ssh-dir path
      interval: 5s
      timeout: 10s
      retries: 5
  discovery_and_jcasc_modifier:
    # image: ${IMAGE_PREFIX}/${GHCR_USERNAME}/quickstart-tutorials/jenkinsci-tutorials:maven_agent_${BRANCH_SUFFIX}
    build:
      context: ./dockerfiles/agent-discovery
    #image: ${IMAGE_PREFIX}/${GHCR_USERNAME}/quickstart-tutorials/jenkinsci-tutorials:agent_discovery_${BRANCH_SUFFIX}
    stdin_open: true
    tty: true
    entrypoint: sh -c "/usr/local/bin/find-name.sh"
    profiles:
      - maven
      - python
      - node
      - android
      - multi
      - golang
      - default
    depends_on:
      sidekick_service:
        condition: service_completed_successfully # Depends on the successful completion of the sidekick_service
    healthcheck: # Change it and the script too so that it checks for the presence of the conductor_ok file
      test: ["CMD-SHELL", "/usr/local/bin/find-name.sh || exit 0"] # Checks if the conductor_ok file exists in the /ssh-dir path
      interval: 5s
      timeout: 10s
      retries: 50
    volumes:
      - jenkins_home:/var/jenkins_home # Mounts the jenkins_home volume to the /var/jenkins_home path inside the container
      - agent-ssh-dir:/ssh-dir # Mounts the agent-ssh-dir volume to the /ssh-dir path inside the container
      - ./secrets/:/secrets/ # Mounts the secrets directory to the /secrets path inside the container
  jenkins_controller:
    #image: ${IMAGE_PREFIX}/${GHCR_USERNAME}/quickstart-tutorials/jenkinsci-tutorials:simple_controller_${BRANCH_SUFFIX}
    build:
        context: ./dockerfiles
    restart: on-failure
    environment:
      - CASC_RELOAD_TOKEN=thisisnotsecure
    ports:
      - "8080:8080"
    volumes:
      - jenkins_home:/var/jenkins_home # Mounts the jenkins_home volume to the /var/jenkins_home path inside the container
      - agent-ssh-dir:/ssh-dir # Mounts the agent-ssh-dir volume to the /app path inside the container
      # I need a way to pass the content of jcasc_token (located in /ssh-dir) to the container as an environment variable
      # Mounting the token as "container secret" makes it available in JCasc as the variable ${CAS_RELOAD_TOKEN}
      - ./secrets/jcasc_token:/run/secrets/CASC_RELOAD_TOKEN:ro # It is there, but it does not seem to be working. I can't see it in the environment variables within the Jenkins UI. Is it because the value changes after the container is started?
    depends_on:
      sidekick_service:
        condition: service_completed_successfully # Depends on the successful completion of the sidekick_service
    healthcheck:
      test: ["CMD-SHELL", "[ -f /ssh-dir/conductor_ok ] || exit 1"]
      # Checks if the conductor_ok file exists in the /ssh-dir path
      interval: 5s
      timeout: 10s
      retries: 5
  default_agent:
    image: jenkins/ssh-agent:5.31.0
    container_name: desktop-jenkins_agent-1
    profiles:
      - default
    depends_on:
      sidekick_service:
        condition: service_completed_successfully # Depends on the successful completion of the sidekick_service
      jenkins_controller:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "[ -f /home/jenkins/.ssh/authorized_keys ] || exit 1"]
      # Checks if the authorized_keys file exists in the /home/jenkins/.ssh path
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - agent-ssh-dir:/home/jenkins/.ssh:ro # Mounts the agent-ssh-dir volume to the /home/jenkins/.ssh path inside the container as read-only
  maven:
    image: ${IMAGE_PREFIX}/${GHCR_USERNAME}/quickstart-tutorials/jenkinsci-tutorials:maven_agent_${BRANCH_SUFFIX}
    container_name: desktop-jenkins_agent-1-maven
    profiles:
      - maven
    depends_on:
      sidekick_service:
        condition: service_completed_successfully # Depends on the successful completion of the sidekick_service
      jenkins_controller:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "[ -f /home/jenkins/.ssh/authorized_keys ] || exit 1"]
      # Checks if the authorized_keys file exists in the /home/jenkins/.ssh path
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - agent-ssh-dir:/home/jenkins/.ssh:ro # Mounts the agent-ssh-dir volume to the /home/jenkins/.ssh path inside the container as read-only
  python:
    image: ${IMAGE_PREFIX}/${GHCR_USERNAME}/quickstart-tutorials/jenkinsci-tutorials:python_agent_${BRANCH_SUFFIX}
    container_name: desktop-jenkins_agent-1-python
    profiles:
      - python
    depends_on:
      sidekick_service:
        condition: service_completed_successfully # Depends on the successful completion of the sidekick_service
      jenkins_controller:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "[ -f /home/jenkins/.ssh/authorized_keys ] || exit 1"]
      # Checks if the authorized_keys file exists in the /home/jenkins/.ssh path
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - agent-ssh-dir:/home/jenkins/.ssh:ro # Mounts the agent-ssh-dir volume to the /home/jenkins/.ssh path inside the container as read-only
  node:
    image: ${IMAGE_PREFIX}/${GHCR_USERNAME}/quickstart-tutorials/jenkinsci-tutorials:node_agent_${BRANCH_SUFFIX}
    environment:
      - GITPOD_WORKSPACE_URL=${GITPOD_WORKSPACE_URL}
    container_name: desktop-jenkins_agent-1-node
    profiles:
      - node
    depends_on:
      sidekick_service:
        condition: service_completed_successfully # Depends on the successful completion of the sidekick_service
      jenkins_controller:
        condition: service_started
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "[ -f /home/jenkins/.ssh/authorized_keys ] || exit 1"]
      # Checks if the authorized_keys file exists in the /home/jenkins/.ssh path
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - agent-ssh-dir:/home/jenkins/.ssh:ro # Mounts the agent-ssh-dir volume to the /home/jenkins/.ssh path inside the container as read-only
  android:
    image: ${IMAGE_PREFIX}/${GHCR_USERNAME}/quickstart-tutorials/jenkinsci-tutorials:android_agent_${BRANCH_SUFFIX}
    environment:
      - GITPOD_WORKSPACE_URL=${GITPOD_WORKSPACE_URL}
    container_name: desktop-jenkins_agent-1-android
    profiles:
      - android
    depends_on:
      sidekick_service:
        condition: service_completed_successfully # Depends on the successful completion of the sidekick_service
      jenkins_controller:
        condition: service_started
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "[ -f /home/jenkins/.ssh/authorized_keys ] || exit 1"]
      # Checks if the authorized_keys file exists in the /home/jenkins/.ssh path
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - agent-ssh-dir:/home/jenkins/.ssh:ro # Mounts the agent-ssh-dir volume to the /home/jenkins/.ssh path inside the container as read-only
  multi_jenkins_controller:
    image: ${IMAGE_PREFIX}/${GHCR_USERNAME}/quickstart-tutorials/jenkinsci-tutorials:simple_controller_${BRANCH_SUFFIX}
    restart: on-failure
    ports:
      - "8080:8080"
    profiles:
      - multi
    volumes:
      - jenkins_home:/var/jenkins_home # Mounts the jenkins_home volume to the /var/jenkins_home path inside the container
      - agent-ssh-dir:/ssh-dir # Mounts the agent-ssh-dir volume to the /app path inside the container
    depends_on:
      sidekick_service:
        condition: service_completed_successfully # Depends on the successful completion of the sidekick_service
    healthcheck:
      test: ["CMD-SHELL", "[ -f /ssh-dir/conductor_ok ] || exit 1"]
      # Checks if the conductor_ok file exists in the /ssh-dir path
      interval: 5s
      timeout: 10s
      retries: 5
  multi:
    image: ${IMAGE_PREFIX}/${GHCR_USERNAME}/quickstart-tutorials/jenkinsci-tutorials:node_agent_${BRANCH_SUFFIX}
    environment:
      - GITPOD_WORKSPACE_URL=${GITPOD_WORKSPACE_URL}
    container_name: desktop-jenkins_agent-1-multi
    profiles:
      - multi
    depends_on:
      sidekick_service:
        condition: service_completed_successfully # Depends on the successful completion of the sidekick_service
      multi_jenkins_controller:
        condition: service_started
    ports:
      - "3000:3000"
      - "5000:5000"
    healthcheck:
      test: ["CMD-SHELL", "[ -f /home/jenkins/.ssh/authorized_keys ] || exit 1"]
      # Checks if the authorized_keys file exists in the /home/jenkins/.ssh path
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - agent-ssh-dir:/home/jenkins/.ssh:ro # Mounts the agent-ssh-dir volume to the /home/jenkins/.ssh path inside the container as read-only
  golang:
    image: ${IMAGE_PREFIX}/${GHCR_USERNAME}/quickstart-tutorials/jenkinsci-tutorials:golang_${BRANCH_SUFFIX}
    environment:
      - GITPOD_WORKSPACE_URL=${GITPOD_WORKSPACE_URL}
    container_name: desktop-jenkins_agent-1-golang
    profiles:
      - golang
    depends_on:
      sidekick_service:
        condition: service_completed_successfully # Depends on the successful completion of the sidekick_service
      jenkins_controller:
        condition: service_started
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "[ -f /home/jenkins/.ssh/authorized_keys ] || exit 1"]
      # Checks if the authorized_keys file exists in the /home/jenkins/.ssh path
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - agent-ssh-dir:/home/jenkins/.ssh:ro # Mounts the agent-ssh-dir volume to the /home/jenkins/.ssh path inside the container as read-only
volumes:
  jenkins_home: null
  agent-ssh-dir:
    name: agent-ssh-dir # Creates a named volume called agent-ssh-dir
